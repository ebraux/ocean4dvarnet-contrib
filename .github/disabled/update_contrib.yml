---
name: Tests et Linting par projet

on:
  push:
    paths:
      - 'contrib/**'
  pull_request:
    paths:
      - 'contrib/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.filter-projects.outputs.projects }}
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Nécessaire pour obtenir tous les changements

      - name: Détecter les projets modifiés
        id: filter-projects
        run: |
          # Obtenir la liste des sous-dossiers modifiés
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^contrib/")
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^contrib/")
           fi

          # Extraire les noms de projets uniques
          PROJECTS=$(echo "$CHANGED_FILES" | awk -F/ '{print $2}' | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "projects=$PROJECTS" >> $GITHUB_OUTPUT
          echo "Projets détectés: $PROJECTS"

  update-contrib:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.projects) }}
      fail-fast: false

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configurer Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          # Installer les dépendances globales
          pip install -r requirements.txt
          # Installer les dépendances spécifiques au projet
          if [ -f contrib/${{ matrix.project }}/requirements.txt ]; then
            pip install -r contrib/${{ matrix.project }}/requirements.txt
          fi
          # Installer les outils de test et de linting
          pip install pytest pytest-cov pylint

      - name: Run contribution metadatas validation
        continue-on-error: false
        run: |

      - name: Exécuter Pylint
        id: pylint
        continue-on-error: true
        run: |
          cd contrib/${{ matrix.project }}
          mkdir -p docs/contrib/${{ matrix.project }}/reports
          SCORE=$(pylint --output-format=text *.py **/*.py contrib/${{ matrix.project }} 2>/dev/null | grep -oP "(?<=rated at )[0-9.]+(?=/10)" || echo "0")
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "Score Pylint: $SCORE/10"

      - name: Générer le badge Pylint
        run: |
          mkdir -p docs/contrib/${{ matrix.project }}/badges
          SCORE=${{ steps.pylint.outputs.score }}
          COLOR="red"
          if (( $(echo "$SCORE > 7.0" | bc -l) )); then COLOR="green"; 
          elif (( $(echo "$SCORE > 5.0" | bc -l) )); then COLOR="yellow"; fi

          curl -o docs/contrib/${{ matrix.project }}/badges/pylint.svg \
            "https://img.shields.io/badge/pylint-$SCORE-$COLOR"
          echo "pylint badge=docs/contrib/${{ matrix.project }}/badges/pylint.svg"

      - name: Exécuter Pytest
        id: pytest
        continue-on-error: true
        run: |
          mkdir -p docs/contrib/${{ matrix.project }}/reports
          pytest --cov=. --cov-report=xml:docs/contrib/${{ matrix.project }}/reports/coverage.xml contrib/${{ matrix.project }}
          # Extraire le pourcentage de couverture
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('docs/contrib/${{ matrix.project }}/reports/coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          COVERAGE_PCT=$(python -c "print(round(float('${COVERAGE}') * 100, 2))")
          echo "coverage=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          echo "Couverture de test: $COVERAGE_PCT%"

      - name: Générer le badge de couverture
        run: |
          mkdir -p docs/contrib/${{ matrix.project }}/badges
          COVERAGE=${{ steps.pytest.outputs.coverage }}
          COLOR="red"
          if (( $(echo "$COVERAGE > 80.0" | bc -l) )); then COLOR="green"; 
          elif (( $(echo "$COVERAGE > 60.0" | bc -l) )); then COLOR="yellow"; fi

          curl -o docs/contrib/${{ matrix.project }}/badges/coverage.svg \
            "https://img.shields.io/badge/coverage-${COVERAGE}%25-$COLOR"
          echo "pytest badge=docs/contrib/${{ matrix.project }}/badges/coverage.svg"

      - name: Generate contribution documentation
        run: python scripts/generate_contrib_docs.py ${{ matrix.project }}

      - name: Re-Generate contribution index
        run: python scripts/manage_contrib_list.py

      - name: display contrib
        run: |
           sudo apt install -y tree
           tree docs/contrib

      - name: Sauvegarder les badges, les rapports et la documentation
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Mise à jour des fichiers pour ${{ matrix.project }}"
          file_pattern: docs/contrib/${{ matrix.project }}/**/* docs/contrib/${{ matrix.project }}/* docs/contrib/index.md
          branch: ${{ github.ref }}

      - name: Build and Deploy
        run: |
          export PYTHONPATH=$(pwd)/contrib:$PYTHONPATH
          mkdocs build
          mkdocs gh-deploy --force