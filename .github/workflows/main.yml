---
name: CI

on:
  push:
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'contrib/**'
      - 'scripts/**'

jobs:
  check-contribs:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.filter-projects.outputs.projects }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour obtenir tous les changements

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Détecter les projets modifiés dans contrib
        id: filter-projects
        run: |
          # Obtenir la liste des sous-dossiers modifiés
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^contrib/" || true)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^contrib/" || true)
          fi

          # Extraire les noms de projets uniques
          echo "CHANGED_FILES: $CHANGED_FILES"
          PROJECTS=$(echo "$CHANGED_FILES" | awk -F/ '{print $2}' | sort -u)

          # Filtrer les projets pour exclure ceux qui ont été supprimés
          FILTERED_PROJECTS=$(echo "$PROJECTS" | while read project; do
          if [ -d "contrib/$project" ]; then
            echo "$project"
          fi
            done | jq -R -s -c 'split("\n") | map(select(length > 0))')

          # Ensure projects output is always a valid JSON array
          if [ -z "$FILTERED_PROJECTS" ]; then
            FILTERED_PROJECTS="[]"
          fi
          echo "projects=$FILTERED_PROJECTS" >> $GITHUB_OUTPUT
          echo "Projets détectés (excluant les supprimés): $FILTERED_PROJECTS"

          # Set deploy flag
          if [[ "$FILTERED_PROJECTS" != "[]" ]]; then
            echo "deploy=true" >> $GITHUB_ENV
          fi


  contrib:
    needs: check-contribs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.check-contribs.outputs.projects || '[]') }}  # Liste dynamique des projets
    outputs:
      artifact-contrib: ${{ steps.set-artifact-contrib.outputs.artifact-contrib }}



    steps:

      - name: Debug matrix
        run: |
          echo "Projects from check-contribs: ${{ needs.check-contribs.outputs.projects }}"
          echo "Project from matrix: ${{ matrix.dir }}"

      - name: Debug matrix
        run: |
          echo "Projects from check-contribs: ${{ needs.check-contribs.outputs.projects }}"      

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install global dependencies
        uses: ./.github/actions/install-deps

      - name: Install contrib-specific dependencies
        uses: ./.github/actions/install-deps
        with:
          path: ${{ matrix.dir }}/requirements.txt


      - name: Run pylint for ${{ matrix.dir }}
        continue-on-error: true
        id: pylint
        uses: ./.github/actions/run-pylint
        with:
          path: contrib/${{ matrix.dir }}
          output-dir: generated-contrib-files/${{ matrix.dir }}

      - name: Run pytest for ${{ matrix.dir }}
        continue-on-error: true
        id: pytest
        uses: ./.github/actions/run-pytest
        with:
          path: contrib/${{ matrix.dir }}
          output-dir: generated-contrib-files/${{ matrix.dir }}

      - name: Generate documentation for ${{ matrix.dir }}
        run: |
          echo "Generating documentation for ${{ matrix.dir }}"
          python scripts/generate_contrib_docs.py ${{ matrix.dir }}
          mv docs/contrib/${{ matrix.dir }}/README.md generated-contrib-files/${{ matrix.dir }}

      - name: Upload generated files
        uses: actions/upload-artifact@v4
        with:
          name: generated-contrib-files-${{ matrix.dir }}
          path: generated-contrib-files/${{ matrix.dir }}

      - name: Enable artifact management
        id: set-artifact-contrib
        run: |
          echo "artifact-contrib=true" >> $GITHUB_ENV
          echo "artifact-contrib=true" >> $GITHUB_OUTPUT



  check-scripts:
    if: >
      contains(join(github.event.commits.*.modified, ','), 'scripts/') ||
      contains(join(github.event.commits.*.added, ','), 'scripts/') ||
    runs-on: ubuntu-latest
    outputs:
      artifact-scripts: ${{ steps.set-artifact-scripts.outputs.artifact-scripts }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install global dependencies
        uses: ./.github/actions/install-deps

      - name: Run pylint for scripts
        continue-on-error: true
        id: pylint
        uses: ./.github/actions/run-pylint
        with:
          path: scripts
          output-dir: generated-scripts-files

      - name: Run pytest for scripts
        continue-on-error: true
        id: pytest
        uses: ./.github/actions/run-pytest
        with:
          path: scripts
          output-dir: generated-scripts-files

      - name: Enable mkdocs generation
        run:
          echo "deploy=true" >> $GITHUB_ENV

      - name: Upload generated files
        uses: actions/upload-artifact@v4
        with:
          name: generated-scripts-files
          path: generated-scripts-files

      - name: Enable artifact management
        id: set-artifact-scripts
        run: |
          echo "artifact-scripts=true" >> $GITHUB_ENV
          echo "artifact-scripts=true" >> $GITHUB_OUTPUT
        


  merge-docs-and-update-repo:
    needs:
      - check-contribs  # to get project matrix
      - contrib
      - check-scripts
    if: always()
    runs-on: ubuntu-latest
    # strategy:
      # matrix:
      #   dir: ${{ fromJson(needs.check-contribs.outputs.projects || '[]') }}  # Liste dynamique des projets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Debug matrix
      #   run: |
      #     echo "Projects from check-contribs: ${{ needs.check-contribs.outputs.projects }}"
      # #     echo "Project from matrix: ${{ matrix.dir }}"
      #     echo "Contribs Artifact :  ${{ needs.contrib.outputs.artifact-contrib}}"
      #     echo "Scripts Artifact :  ${{ needs.check-scripts.outputs.artifact-scripts}}"

      # - name: Debug matrix
      #   run: |
      #     echo "Projects from check-contribs: ${{ needs.check-contribs.outputs.projects }}"      


      # - name: Download artifact for dynamic project ${{ matrix.dir }}
      #   continue-on-error: true
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: generated-contrib-files-${{ matrix.dir }}  # Utilisation du nom dynamique basé sur la matrice
      #     path: docs/contrib/${{ matrix.dir }}  # Télécharger l'artefact dans docs/contrib/{project}        

      # - name: Install GitHub CLI
      #   if: ${{ needs.check-contribs.outputs.projects != '[]' }}
      #   run: |
      #     sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
      #     sudo apt-add-repository https://cli.github.com/packages
      #     sudo apt update
      #     sudo apt install gh

      - name: Download all contrib artifacts
        if: ${{ needs.check-contribs.outputs.projects != '[]' }}
        run: |
          echo "Projects list: ${{ needs.check-contribs.outputs.projects }}"
          PROJECTS=$(echo '${{ needs.check-contribs.outputs.projects }}' | jq -r '.[]')
      
          for project in $PROJECTS; do
          echo "Downloading artifact for $project"
          gh run download --name "generated-contrib-files-$project" --dir "docs/contrib/$project" || echo "No artifact found for $project"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         

      - name: Download generated files for scripts
        continue-on-error: true
        #if: needs. check-scripts.outputs.artifact-scripts == 'true'
        uses: actions/download-artifact@v4
        with:
          name: generated-scripts-files
          path: docs/scripts/

      - name: Generate documentation for contrib
        run: |
          echo "Generating documentation for contrib"
          python scripts/manage_contrib_list.py

      - name: debug
        run: |
           sudo apt install -y tree
           tree .
           # tree docs/contrib
           # tree docs/scripts
           # tree generated-files-*
           # tree generated-files-scripts

      - name: Commit and push generated files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update generated files by CI"
          file_pattern: |
            docs/contrib/**
            docs/scripts/**

  update-mkdocs:
    needs: merge-docs-and-update-repo
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install global dependencies
        uses: ./.github/actions/install-deps

      - name: debug
        run: |
           sudo apt install -y tree
           tree docs

      - name: Deploy MkDocs to GitHub Pages
        #if: needs.check-contribs.outputs.deploy == 'true'
        run: |
          mkdocs gh-deploy --force


