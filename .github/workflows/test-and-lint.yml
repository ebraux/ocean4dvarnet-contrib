name: Run Tests & Lint for contrib projects

on:
  push:
    paths:
      - 'contrib/**'   # Se déclenche seulement si quelque chose dans `contrib/` change
  pull_request:
    paths:
      - 'contrib/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.filter.outputs.dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Récupère tout l'historique pour éviter l'erreur "fatal: bad object"

      - name: Debug GitHub event context
        run: echo "Before commit: ${{ github.event.before }}"

      - name: Detect modified contrib projects
        id: filter
        run: |
          BEFORE_COMMIT=${{ github.event.before }}

          # Vérifier si BEFORE_COMMIT est valide, sinon prendre le commit parent
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e $BEFORE_COMMIT^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD^)
          fi

          echo "Comparing $BEFORE_COMMIT with ${{ github.sha }}"

          # Récupérer les dossiers modifiés sous contrib/
          CHANGED_DIRS=$(git diff --name-only $BEFORE_COMMIT ${{ github.sha }} | grep '^contrib/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')

          echo "dirs=$CHANGED_DIRS" >> $GITHUB_ENV
          echo "::set-output name=dirs::$CHANGED_DIRS"

  test-and-lint:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_dirs != '[]' && needs.detect-changes.outputs.changed_dirs != '' }}
    strategy:
      matrix:
        contrib_project: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # S'assure que tout l'historique est là

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install pylint pytest

      - name: Run pylint
        run: |
          pylint contrib/${{ matrix.contrib_project }} --output-format=json > pylint-${{ matrix.contrib_project }}.json || true

      - name: Run pytest
        run: |
          pytest contrib/${{ matrix.contrib_project }}/tests --junitxml=pytest-${{ matrix.contrib_project }}.xml || true

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        with:
          name: pylint-results-${{ matrix.contrib_project }}
          path: pylint-${{ matrix.contrib_project }}.json

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.contrib_project }}
          path: pytest-${{ matrix.contrib_project }}.xml
